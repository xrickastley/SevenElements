import{_ as s,c as a,o as t,ah as i,ai as n}from"./chunks/framework.DGDRXwgj.js";const m=JSON.parse('{"title":"Fixing Boss Bar Displays","description":"","frontmatter":{"next":false},"headers":[],"relativePath":"developer/compatibility/fixing_boss_bar_displays.md","filePath":"developer/compatibility/fixing_boss_bar_displays.md","lastUpdated":1759331139000}'),o={name:"developer/compatibility/fixing_boss_bar_displays.md"};function r(l,e,d,h,p,c){return t(),a("div",null,[...e[0]||(e[0]=[i('<h1 id="fixing-boss-bar-displays" tabindex="-1">Fixing Boss Bar Displays <a class="header-anchor" href="#fixing-boss-bar-displays" aria-label="Permalink to “Fixing Boss Bar Displays”">​</a></h1><p>Bosses may have elements applied to them. Since they could be big (ex. Ender Dragon), it&#39;s quite hard to see the element currently applied on them. For a better experience, the currently applied elements on bosses are displayed at the bottom of the boss bar.</p><p align="center"><img src="'+n+'"></p><p>However, this doesn&#39;t work for custom bosses, immediately.</p><h2 id="data-pack-method" tabindex="-1">Data pack method <a class="header-anchor" href="#data-pack-method" aria-label="Permalink to “Data pack method”">​</a></h2><p>If your data pack features a custom boss and you want applied elements to render for their bossbar, simply use the <code>/bossbar</code> command!</p><div class="language-mcfunction"><button title="Copy Code" class="copy"></button><span class="lang">mcfunction</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">bossbar</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> set &lt;id&gt; entity &lt;entity&gt;</span></span></code></pre></div><p>This will link the entity to the bossbar, and any elements they have currently inflicted will be displayed under their boss bar like the Ender Dragon and Wither!</p><h2 id="mod-method" tabindex="-1">Mod method <a class="header-anchor" href="#mod-method" aria-label="Permalink to “Mod method”">​</a></h2><p>If your mod features a custom boss and you want applied elements to render for their bossbar, simply use the <code>IBossBar#sevenelements$setEntity</code> method!</p><p>Do note that a <code>LivingEntity</code> is required as the boss!</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">bossbar</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sevenelements$setEntity</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(customBossEntity);</span></span></code></pre></div><p>This will link the entity to the bossbar, and any elements they have currently inflicted will be displayed under their boss bar like the Ender Dragon and Wither!</p><p>You can directly use the <code>sevenelements$setEntity</code> on the <code>BossBar</code> instance, as Seven Elements marks it as an <a href="https://wiki.fabricmc.net/tutorial:interface_injection" target="_blank" rel="noreferrer">Injected Interface</a>.</p><p>Seven Elements will also automatically take care of syncing this data to the necessary clients, so you don&#39;t need to worry about adding a sync payload/packet and deal with more networking!</p>',15)])])}const y=s(o,[["render",r]]);export{m as __pageData,y as default};
