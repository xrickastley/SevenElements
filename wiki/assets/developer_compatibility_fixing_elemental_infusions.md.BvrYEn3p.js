import{_ as s,c as e,o as t,ah as a}from"./chunks/framework.DGDRXwgj.js";const c=JSON.parse('{"title":"Fixing Elemental Infusions","description":"","frontmatter":{"prev":false},"headers":[],"relativePath":"developer/compatibility/fixing_elemental_infusions.md","filePath":"developer/compatibility/fixing_elemental_infusions.md","lastUpdated":1759331139000}'),n={name:"developer/compatibility/fixing_elemental_infusions.md"};function l(h,i,o,r,p,d){return t(),e("div",null,[...i[0]||(i[0]=[a(`<h1 id="fixing-elemental-infusions" tabindex="-1">Fixing Elemental Infusions <a class="header-anchor" href="#fixing-elemental-infusions" aria-label="Permalink to “Fixing Elemental Infusions”">​</a></h1><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>This compatibility layer only applies to mods! If you are a data pack developer, you may freely skip this page.</p></div><p>From <a href="./../../guide/elements/elemental_combat.html#indirect-elemental-damage">Indirect Elemental Damage</a>, you may have seen that supported items that shoot projectiles like the <a href="https://minecraft.wiki/w/Bow" target="_blank" rel="noreferrer">Bow</a>, <a href="https://minecraft.wiki/w/Crossbow" target="_blank" rel="noreferrer">Crossbow</a> and <a href="https://minecraft.wiki/w/Trident" target="_blank" rel="noreferrer">Trident</a> will have their damage be infused with the same Element as the item.</p><p>From <a href="./../../guide/elements/elemental_combat.html#direct-elemental-damage">Direct Elemental Damage</a>, you may have seen that if damage is dealt directly, it would be infused with the same Element as the item.</p><p>If your mod adds an item that does this, does &quot;direct&quot; <em>indirect</em> or &quot;indirect&quot; <em>direct</em> elemental damage, you can test this by infusing the item with an Element and dealing damage with it.</p><p>When the damage isn&#39;t of the expected Element, that means that the elemental infusion isn&#39;t properly applied.</p><h2 id="fixing-projectile-infusions" tabindex="-1">Fixing projectile infusions <a class="header-anchor" href="#fixing-projectile-infusions" aria-label="Permalink to “Fixing projectile infusions”">​</a></h2><p>An easy way to fix projectile infusions not working is by calling <code>sevenelements$setOriginStack</code> on the created instance of <code>ProjectileEntity</code> with the stack that has to be infused in order for the projectiles to be infused as well.</p><p>Seven Elements handles saving and loading the elemental infusion, so you don&#39;t need to keep track of the origin stack in-between world saves.</p><h3 id="automatic-projectile-infusions" tabindex="-1">Automatic projectile infusions <a class="header-anchor" href="#automatic-projectile-infusions" aria-label="Permalink to “Automatic projectile infusions”">​</a></h3><p>In versions of Seven Elements for the later Minecraft versions, this will work out of the box <strong>if</strong> your custom projectile is a subclass of <code>PersistentProjectileEntity</code> <strong>and</strong> you used either the second or third constructor overload to create the entity:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> abstract</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> PersistentProjectileEntity</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> extends</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> ProjectileEntity</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	protected</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> PersistentProjectileEntity</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">EntityType</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">?</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> extends</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> PersistentProjectileEntity</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">&gt; </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">type</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">double</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> x</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">double</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> y</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">double</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> z</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">World</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> world</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">ItemStack</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> stack</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, @</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Nullable</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> ItemStack</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> weapon</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span>
<span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">		// ...</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	protected</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> PersistentProjectileEntity</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">EntityType</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">?</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> extends</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> PersistentProjectileEntity</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">&gt; </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">type</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">LivingEntity</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> owner</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">World</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> world</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">ItemStack</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> stack</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, @</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Nullable</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> ItemStack</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> shotFrom</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span>
<span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">		// ...</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">	}</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><p>For the second overload, the infusion will originate from the <code>@Nullable ItemStack weapon</code> argument, given that it is not <code>null</code>.</p><p>For the third overload, the infusion will originate from the <code>@Nullable ItemStack shotFrom</code> argument, given that it is not <code>null</code>.</p><h2 id="other-methods" tabindex="-1">Other methods <a class="header-anchor" href="#other-methods" aria-label="Permalink to “Other methods”">​</a></h2><p>Damage is only considered <em>indirect</em> <strong>if</strong> the <code>source</code> argument is provided in a <code>DamageSource</code>. If a <code>source</code> is not needed, simply leave it as <code>null</code>, and infusions should work properly, assuming the <code>attacker</code> is set properly.</p><p>Likewise, damage is only considered <em>direct</em> <strong>if</strong> the <code>source</code> argument is <strong>not</strong> provided in a <code>DamageSource</code>. If you have an ability that summons something, like a tornado, AoE damage field, magic spells or other things, it would be best if you:</p><ul><li>a. Use the same method as indirect elemental damage: store the item used to summon the ability and use it to create the <code>ElementalDamageSource</code>, or</li><li>b. Consider the ability as indirect and ignore item infusions directly.</li></ul><p>This heavily depends on your use case: <strong>a.</strong> is best for &quot;closely-linked abilities&quot; (tornados, fields, etc.), while <strong>b.</strong> is best for a summoning-type ability seperate from the item (&quot;summons to fight for you&quot; type abilities, etc.). Of course, this isn&#39;t an absolute guide; the implementation is purely up to how <strong>you</strong>, as the mod developer, want it to be.</p>`,19)])])}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
